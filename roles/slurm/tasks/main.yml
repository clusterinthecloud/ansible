---
- name: Install munge
  ansible.builtin.yum:
    name: munge
    state: installed

# If we're the mgmt node, create a munge key
- name: Generate munge key
  ansible.builtin.shell:
    cmd: dd if=/dev/urandom bs=1 count=1024 > munge.key
    creates: munge.key
  args:
    chdir: /etc/munge/
  when: slurm_role == "mgmt"

- name: Check presence of munge config file
  ansible.builtin.stat:
    path: /etc/munge/munge.key
  register: munge_config_file

# If we're a compute node, grab the file placed by Packer
- name: Copy munge.key
  ansible.builtin.copy:
    src: /tmp/munge.key
    dest: /etc/munge/munge.key
    remote_src: true
    mode: "0400"
  when:
    - slurm_role == "compute"
    - not munge_config_file.stat.exists

# Make sure that the Packer-placed file is deleted
- name: Delete /tmp/munge.key
  ansible.builtin.file:
    path: /tmp/munge.key
    state: absent

- name: Set permissions on munge key
  ansible.builtin.file:
    path: /etc/munge/munge.key
    owner: munge
    group: munge
    mode: "0400"

- name: Start service munge
  ansible.builtin.service:
    name: munge
    enabled: true
    state: started

- name: Install firewalld
  ansible.builtin.package:
    name: firewalld
    state: present

- name: Install python-firewall
  ansible.builtin.package:
    name: python3-firewall
    state: present

- name: Start service firewalld
  ansible.builtin.service:
    name: firewalld
    enabled: true
    state: started

- name: Add Slurm repository
  ansible.builtin.yum_repository:
    name: slurm
    description: Slurm
    baseurl: https://download.opensuse.org/repositories/home:/Milliams:/citc/EPEL_8_CentOS/
    gpgcheck: true
    gpgkey: https://download.opensuse.org/repositories/home:/Milliams:/citc/EPEL_8_CentOS/repodata/repomd.xml.key

- name: Create slurm group
  ansible.builtin.group:
    name: slurm
    state: present
    system: true
    gid: 245

- name: Create slurm user
  ansible.builtin.user:
    name: slurm
    comment: Slurm controller user
    group: slurm
    system: true
    uid: 245

- name: Install Slurm
  ansible.builtin.package:
    name: "{{ slurm_packages | map('regex_replace', '^(.*)$', slurm_package_template) | list }}"
    state: present
  vars:
    slurm_package_template: "slurm-\\1-{{ slurm_version }}*"  # The \1 will be replaced by the package name â†‘
  register: slurm_installed
  until: slurm_installed is not failed
  retries: 5

- name: Create slurm accounting database
  community.mysql.mysql_db:
    name: slurmacct
    state: present
  when: slurm_role == "mgmt"

- name: Create slurm MySQL user
  community.mysql.mysql_user:
    name: slurm
    password: "{{ slurm_accounting_db_password }}"
    priv: 'slurmacct.*:ALL'
    state: present
  when: slurm_role == "mgmt"

- name: Create slurm config directory
  ansible.builtin.file:
    path: /etc/slurm
    state: directory
    mode: "0755"

- name: Slurm config file
  ansible.builtin.template:
    src: slurm.conf.j2
    dest: /etc/slurm/slurm.conf
    owner: slurm
    group: slurm
    mode: "0644"

- name: Make slurm config directory
  ansible.builtin.file:
    path: /mnt/{{ filesystem_mount_point }}/etc/slurm
    state: directory
    mode: u=rwx,g=rx,o=rx
  when: slurm_role == "mgmt"

- name: Slurm config file (shared)
  ansible.builtin.template:
    src: slurm_shared.conf.j2
    dest: /mnt/shared/etc/slurm/slurm.conf
    owner: slurm
    group: slurm
    mode: "0644"
  when: slurm_role == "mgmt"

- name: Slurmdbd config file
  ansible.builtin.template:
    src: slurmdbd.conf.j2
    dest: /etc/slurm/slurmdbd.conf
    owner: slurm
    group: slurm
    mode: "0400"
  when: slurm_role == "mgmt"
  notify: Restart slurmdbd

- name: Cgroup config file
  ansible.builtin.template:
    src: cgroup.conf.j2
    dest: /etc/slurm/cgroup.conf
    owner: slurm
    group: slurm
    mode: "0400"

- name: Set slurm log directory permissions
  ansible.builtin.file:
    path: /var/log/slurm/
    state: directory
    owner: slurm
    group: slurm
    mode: "0755"

- name: Set slurm spool directory permissions
  ansible.builtin.file:
    path: /var/spool/slurm/
    state: directory
    owner: slurm
    group: slurm
    mode: "0755"
  when: slurm_role == "mgmt"

- name: Set slurmd config directory permissions
  ansible.builtin.file:
    path: /var/spool/slurmd/
    state: directory
    owner: root
    group: root
    mode: "0755"
  when: slurm_role == "compute"

- name: Install SELinux-policy
  ansible.builtin.package:
    name: selinux-policy

- name: Disable SELinux
  ansible.posix.selinux:
    state: permissive
    policy: targeted

# Requires selinux:
#   allow firewalld_t cloud_init_t:dbus send_msg;
- name: Open all ports
  ansible.posix.firewalld:
    zone: trusted
    source: 10.0.0.0/8
    immediate: true
    permanent: true
    state: enabled
  notify: Restart firewalld

- name: Perform generic elastic Slurm config
  ansible.builtin.include_tasks: elastic.yml
  when: slurm_role == "mgmt"

- name: Perform OCI elastic Slurm config
  ansible.builtin.include_tasks: elastic_oci.yml
  when: slurm_role == "mgmt" and ansible_local.citc.csp == "oracle"

- name: Perform GCP elastic Slurm config
  ansible.builtin.include_tasks: elastic_gcp.yml
  when: slurm_role == "mgmt" and ansible_local.citc.csp == "google"

- name: Perform AWS elastic Slurm config
  ansible.builtin.include_tasks: elastic_aws.yml
  when: slurm_role == "mgmt" and ansible_local.citc.csp == "aws"

- name: Perform OpenStack elastic Slurm config
  ansible.builtin.include_tasks: elastic_openstack.yml
  when: slurm_role == "mgmt" and ansible_local.citc.csp == "openstack"

- name: Start service slurmctld
  ansible.builtin.service:
    name: slurmctld
    enabled: true
  when: slurm_role == "mgmt"

- name: Start service slurmdbd
  ansible.builtin.service:
    name: slurmdbd
    state: started
    enabled: true
  when: slurm_role == "mgmt"

- name: Enable service slurmd
  ansible.builtin.service:
    name: slurmd
    enabled: true
  when: slurm_role == "compute"

# As of Slurm 18.08 the slurmdbd service doesn't become available immediately
# This ensures that the service is available before continuing
- name: Wait for slurmdbd to start
  ansible.builtin.wait_for:
    port: 6819
  when: slurm_role == "mgmt"

- name: Create accounting cluster
  ansible.builtin.command: sacctmgr --immediate add cluster {{ slurm_cluster_name }}
  register: create_cluster_result
  changed_when: "create_cluster_result.rc == 0"
  failed_when: "create_cluster_result.rc != 0 and create_cluster_result.stdout != ' This cluster {{ slurm_cluster_name }} already exists.  Not adding.'"
  when: slurm_role == "mgmt"
